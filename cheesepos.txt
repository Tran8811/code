struct Cheese {
    SDL_Rect rect;
    int dx = 0; // Horizontal movement change
    int dy = 0; // Vertical movement change
    int speed = 2; // Movement speed in pixels per frame

    // ... other methods ...
};
Cheese(int x, int y) {
    rect.x = x;
    rect.y = y;
    rect.h = CHEESE_SIZE;
    rect.w = CHEESE_SIZE;

    // Randomize movement direction
    int randomDirection = rand() % 4;
    switch (randomDirection) {
        case 0: // North
            dx = 0;
            dy = -speed;
            break;
        case 1: // South
            dx = 0;
            dy = speed;
            break;
        case 2: // West
            dx = -speed;
            dy = 0;
            break;
        case 3: // East
            dx = speed;
            dy = 0;
            break;
    }
}
void updateCheese(Cheese& cheese, int screenWidth, int screenHeight) {
    // Update cheese position
    cheese.rect.x += cheese.dx;
    cheese.rect.y += cheese.dy;

    // Reverse direction if cheese goes off screen boundaries
    if (cheese.rect.x < 0 || cheese.rect.x >= screenWidth - cheese.rect.w) {
        cheese.dx *= -1; // Reverse horizontal direction
    }
    if (cheese.rect.y < 0 || cheese.rect.y >= screenHeight - cheese.rect.h) {
        cheese.dy *= -1; // Reverse vertical direction
    }
}
while (isRunning) {
    // ... handle events ...

    // Update cheese position
    updateCheese(cheese, screenWidth, screenHeight);

    // Render cheese and other objects
    // ...

    // Present the rendered screen
    SDL_RenderPresent(renderer);
}